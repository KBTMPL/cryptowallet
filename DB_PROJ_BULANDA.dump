CREATE SEQUENCE seq_addresses;
CREATE TABLE addresses (
        id int PRIMARY KEY DEFAULT nextval('seq_addresses'),
        address text UNIQUE NOT NULL
);

CREATE SEQUENCE seq_wallet;
CREATE TABLE wallets (
        id int PRIMARY KEY DEFAULT nextval('seq_wallet'),
        addresses_id int REFERENCES addresses(id) ON UPDATE RESTRICT ON DELETE RESTRICT,
        cryptocurrency_amount double precision NOT NULL DEFAULT 0,
        password_hashed text NOT NULL,
        delete_code_hashed text NOT NULL,
        CHECK(cryptocurrency_amount>=0)
);

CREATE SEQUENCE seq_transactions;
CREATE TABLE transactions (
	id int PRIMARY KEY DEFAULT nextval('seq_transactions'),
	id_from int,
	id_to int,
	timestamp bigint,
	tr_amount double precision NOT NULL,
	CHECK(tr_amount>0)
);

CREATE FUNCTION create_wallet (wallets.password_hashed%type, addresses.address%type, wallets.delete_code_hashed%type) RETURNS bool as '
DECLARE
curr_address_id addresses.id%type;
new_password_hashed wallets.password_hashed%type := $1;
new_address addresses.address%type := $2;
new_delete_code_hashed wallets.delete_code_hashed%type := $3;
BEGIN
INSERT INTO addresses (address) VALUES (new_address);
SELECT id INTO curr_address_id FROM addresses WHERE address=new_address;
INSERT INTO wallets (addresses_id, password_hashed, delete_code_hashed) VALUES (curr_address_id, new_password_hashed, new_delete_code_hashed);
IF EXISTS (SELECT * FROM wallets WHERE addresses_id = curr_address_id) THEN
RETURN true;
ELSE
RETURN false;
END IF;
END;
' language 'plpgsql';

CREATE FUNCTION send_crypto (wallets.cryptocurrency_amount%type, addresses.address%type, addresses.address%type, wallets.password_hashed%type, transactions.timestamp%type) RETURNS int as '
DECLARE
amount wallets.cryptocurrency_amount%type := $1;
addr_from addresses.address%type := $2;
addr_to addresses.address%type := $3;
password_hashed_from wallets.password_hashed%type := $4;
epoch transactions.timestamp%type := $5;
id_from_temp addresses.id%type;
id_to_temp addresses.id%type;
cryptocurrency_amount_from wallets.cryptocurrency_amount%type;
cryptocurrency_amount_from_after wallets.cryptocurrency_amount%type;
cryptocurrency_amount_to wallets.cryptocurrency_amount%type;
BEGIN

IF amount<=0 THEN
RETURN 1;
END IF;

IF NOT EXISTS (SELECT id FROM addresses WHERE address=addr_from) THEN
RETURN 2;
ELSE
SELECT id INTO id_from_temp FROM addresses WHERE address=addr_from;
SELECT cryptocurrency_amount INTO cryptocurrency_amount_from FROM wallets WHERE addresses_id=id_from_temp AND password_hashed=password_hashed_from FOR UPDATE;
END IF;

IF NOT EXISTS (SELECT id FROM addresses WHERE address=addr_to) THEN
RETURN 3;
ELSE
SELECT id INTO id_to_temp FROM addresses WHERE address=addr_to;
SELECT cryptocurrency_amount INTO cryptocurrency_amount_to FROM wallets WHERE addresses_id=id_to_temp FOR UPDATE;
END IF;

IF NOT EXISTS (SELECT * FROM wallets WHERE addresses_id=id_from_temp AND password_hashed=password_hashed_from) THEN
RETURN 4;
END IF;

IF cryptocurrency_amount_from-amount<0_from_after THEN
RETURN 5;
END IF;

UPDATE wallets SET cryptocurrency_amount = cryptocurrency_amount_from-amount WHERE addresses_id=id_from_temp AND password_hashed=password_hashed_from;
SELECT cryptocurrency_amount INTO cryptocurrency_amount_from_after FROM wallets WHERE addresses_id=id_from_temp AND password_hashed=password_hashed_from FOR UPDATE;

IF cryptocurrency_amount_from = cryptocurrency_amount_from_after THEN
RETURN 6;
END IF;

UPDATE wallets SET cryptocurrency_amount = cryptocurrency_amount_to+amount WHERE addresses_id=id_to_temp;

INSERT INTO transactions (id_from, id_to, timestamp, tr_amount) VALUES (id_from_temp, id_to_temp, epoch, amount);

RETURN 7;
END;
' language 'plpgsql';
