CREATE SEQUENCE seq_addresses;
CREATE TABLE addresses (
        id int PRIMARY KEY DEFAULT nextval('seq_addresses'),
        address text UNIQUE NOT NULL
);

CREATE SEQUENCE seq_wallet;
CREATE TABLE wallets (
        id int PRIMARY KEY DEFAULT nextval('seq_wallet'),
        addresses_id int REFERENCES addresses(id) ON UPDATE RESTRICT ON DELETE RESTRICT,
        cryptocurrency_amount double precision DEFAULT 0,
        password_hashed text NOT NULL
        CHECK(cryptocurrency_amount>=0)
);


CREATE SEQUENCE seq_transactions;
CREATE TABLE transactions (
	id_transaction int PRIMARY KEY DEFAULT nextval('seq_transactions'),
	id_from int,
	id_to int,
	timestamp bigint
);

CREATE FUNCTION create_wallet (wallets.password_hashed%type, addresses.address%type) RETURNS bool as '
DECLARE
curr_address_id addresses.id%type;
BEGIN
INSERT INTO addresses (address) VALUES ($2);
SELECT id INTO curr_address_id FROM addresses WHERE address=$2;
INSERT INTO wallets (addresses_id, password_hashed) VALUES (curr_address_id, $1);
IF EXISTS (SELECT * FROM wallets WHERE addresses_id = curr_address_id) THEN
RETURN true;
ELSE
RETURN false;
END IF;

END;
' language 'plpgsql';

